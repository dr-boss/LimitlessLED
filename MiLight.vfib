{"name":"MiLight","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"-- Limitlessled / Mi-Light with Bridge v6\n-- v0.1 beta by DrBoss\n-- code for api from http://www.limitlessled.com/dev/\n-- idea based on VD from https://forum.fibaro.com/index.php?/topic/19094-virtual-device-limitless-led-milight-controller/&tab=comments#comment-69962\n-- part of code by https://github.com/basvinken from discusion on https://github.com/home-assistant/home-assistant/issues/4676\n--\n-- need IP and PORT of Mi-Light Bridge, one VD by one bridge\n-- COLOR and MODE button need to press SET after change color or mode program\n-- this is 'fast' version of VD with many debug code line and not optimized.\n","ui.lCommand.value":"Successfull","ui.lGroup.value":"3","ui.sBrightness.value":100,"ui.sColor.value":73,"ui.sKelvin.value":100,"ui.sSaturation.value":0,"visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Active group","name":"lGroup","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"1","name":"bG1","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"1\");","buttonIcon":0,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"2","name":"bG2","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"2\");","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"3","name":"bG3","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"3\");","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"4","name":"bG4","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"4\");","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"Bri","name":"bBridge","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"Bridge\");","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"Command","name":"lCommand","favourite":false,"main":false}]},{"type":"button","elements":[{"id":8,"lua":true,"waitForResponse":false,"caption":"On","name":"bOn","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"On\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"Night","name":"bNight","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"Night_On\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"Off","name":"bOff","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"Off\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"favourite":false,"main":false},{"id":11,"lua":true,"waitForResponse":false,"caption":"All","name":"bAll","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lGroup.value\",\"All\");","buttonIcon":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":12,"lua":true,"waitForResponse":false,"caption":"Brightness","name":"sBrightness","msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetBri\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"value":100,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":13,"lua":true,"waitForResponse":false,"caption":"Saturation","name":"sSaturation","msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetSat\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":14,"lua":true,"waitForResponse":false,"caption":"Temperature","name":"sKelvin","msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetKelvin\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"value":100,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":15,"lua":true,"waitForResponse":false,"caption":"Color","name":"sColor","msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetColor\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"value":73,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":16,"lua":true,"waitForResponse":false,"caption":"Color","name":"Button41","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.sSaturation.value\",\"0\");\n--fibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetColor\");\nColors={{name =\"pink\", value=\"0x00\", dec=\"0\"},\n\t{name=\"red\",value=\"0xFF\", dec=\"100\"},\n\t{name=\"lavender\",value=\"0xD9\", dec=\"85\"},\n\t{name=\"blue\",value=\"0xBA\", dec=\"73\"},\n\t{name=\"aqua\",value=\"0x85\", dec=\"52\"},\n  \t{name=\"seafoam green\",value=\"0x7A\", dec=\"48\"},\n\t{name=\"green\",value=\"0x7A\", dec=\"48\"},\n\t{name=\"lime\",value=\"0x54\", dec=\"33\"},\n\t{name=\"yellow\",value=\"0x3B\", dec=\"23\"},\n\t{name=\"yellow orange\",value=\"0x90\", dec=\"56\"},\n\t{name=\"orange\",value=\"0x1E\", dec=\"12\"},\n\t{name=\"violet\",value=\"0xC0\", dec=\"75\"},\n\t{name=\"lavender\",value=\"0xF0\", dec=\"94\"}};\n\n\n--local ActiveGroup = fibaro:getValue(thisDevice, \"ui.lblActiveGroup.value\")\ncurrentCommand = tostring(fibaro:getValue(thisDevice, \"ui.lCommand.value\"));\nif currentCommand:sub(1, 8) ~= \"SetColor\" then \n  \tcurrentColorName = Colors[1].name; \n\tfibaro:call(thisDevice,\"setProperty\",\"ui.sColor.value\",tostring(tonumber(Colors[1].dec)));\n\tfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\", \"SetColor \"..Colors[1].name);\n  end;\ncurrentCommand = tostring(fibaro:getValue(thisDevice, \"ui.lCommand.value\"));\n\nif currentCommand:sub(1, 8) == \"SetColor\" then \n  fibaro:debug('t1')\n  fibaro:debug(currentCommand)\n  \nfor i= 1, #Colors do\n    fibaro:debug(string.sub(Colors[i].name,1)..\" - \"..currentCommand:sub(10))\n\n\n    if string.sub(Colors[i].name,1) == currentCommand:sub(10) then\n\tfibaro:debug(string.sub(Colors[i].name,1)..\" = \"..currentCommand:sub(10))\n    fibaro:call(thisDevice,\"setProperty\",\"ui.sColor.value\",tostring(tonumber(Colors[i].dec)));\n      \n  currentColorName = Colors[i].name\n  currentColorValue = Colors[i].value\n      \n  fibaro:debug(Colors[i].name)\n  fibaro:debug(Colors[i].value)\n  fibaro:debug(i)\n\n    end\n\nend  \nend  \n  --\tj = tonumber(currentCommand:sub(10))\n--    currentColorName = Colorss[j].name; \n--end; \n\n\n--if currentProgramName == \"\" then currentProgramName = Programs[1].name; end;\nfibaro:debug(currentColorName)\n\n--fibaro:debug(\"currentProgramName to match to is  \"..currentColorName);\n \n-- main: cycle states\n-- each press toggle through available states\n--local programCommand = Programs[1].value;\n\nfor i= 1, #Colors do\nfibaro:debug('t2')\n  \tif Colors[i].name == currentColorName then\n    \tfibaro:debug(Colors[i].name..':='..currentColorName)\n--\t\t    \tfibaro:debug(Colors[i].value..'='..fibaro:getValue(thisDevice, \"ui.sColor.value\")\n--        fibaro:debug(i)\n    \tif i == #Colors then \n      \t\tcurrentColorName = Colors[1].name;\n      fibaro:call(thisDevice,\"setProperty\",\"ui.sColor.value\",tostring(tonumber(Colors[1].dec)));\n--      \t\tprogramCommand = Programs[1].value;\n      \telse\n      \t\tcurrentColorName = Colors[i+1].name;\n      fibaro:call(thisDevice,\"setProperty\",\"ui.sColor.value\",tostring(tonumber(Colors[i+1].dec)));\n\n--        \tprogramCommand = Programs[i+1].value;\n      \tend\n      \t  fibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetColor \"..tostring(currentColorName));\n   \t  fibaro:debug(\"Matched switching to \"..currentColorName..\" = \" ..Colors[i+1].value..\" = \" ..Colors[i+1].dec);\n\n    break\n  \tend\nend \n\n--fibaro:call(thisDevice,\"setProperty\",\"ui.sColor.value\",\"0\");\n","buttonIcon":0,"favourite":false,"main":false},{"id":17,"lua":true,"waitForResponse":false,"caption":"White","name":"Button42","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\n--fibaro:call(thisDevice,\"setProperty\",\"ui.sKelvin.value\",\"50\");\n--\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"White_On\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")\n\n\n\n","buttonIcon":0,"favourite":false,"main":false},{"id":18,"lua":true,"waitForResponse":false,"caption":"W.Coll","name":"Button43","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetKelvin\");\nfibaro:call(thisDevice,\"setProperty\",\"ui.sKelvin.value\",\"100\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")\n--fibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"White_On\");","buttonIcon":0,"favourite":false,"main":false},{"id":19,"lua":true,"waitForResponse":false,"caption":"W.Warm","name":"Button44","empty":false,"msg":"local thisDevice= fibaro:getSelfId(); \nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetKelvin\");\nfibaro:call(thisDevice,\"setProperty\",\"ui.sKelvin.value\",\"0\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")\n--fibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"White_On\");","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":20,"lua":true,"waitForResponse":false,"caption":"Mode","name":"Button61","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nPrograms={\n--\t{name=\"Program 0\",value=\"0x00\"},\n\t{name=\"Program 1\",value=\"0x01\"},\n\t{name=\"Program 2\",value=\"0x02\"},\n\t{name=\"Program 3\",value=\"0x03\"},\n\t{name=\"Program 4\",value=\"0x04\"},\n\t{name=\"Program 5\",value=\"0x05\"},\n\t{name=\"Program 6\",value=\"0x06\"},\n\t{name=\"Program 7\",value=\"0x07\"},\n\t{name=\"Program 8\",value=\"0x08\"},\n\t{name=\"Program 9\",value=\"0x09\"}};\n\n\n--local ActiveGroup = fibaro:getValue(thisDevice, \"ui.lblActiveGroup.value\")\ncurrentCommand = tostring(fibaro:getValue(thisDevice, \"ui.lCommand.value\"));\nif currentCommand:sub(1, 7) ~= \"SetProg\" then currentProgramName = Programs[1].name; end;\nif currentCommand:sub(1, 7) == \"SetProg\" then \n\tj = tonumber(currentCommand:sub(15, 15))\n    currentProgramName = Programs[j].name; \nend; \n\n\n--if currentProgramName == \"\" then currentProgramName = Programs[1].name; end;\nfibaro:debug(currentProgramName)\n\nfibaro:debug(\"currentProgramName to match to is  \"..currentProgramName);\n \n-- main: cycle states\n-- each press toggle through available states\n--local programCommand = Programs[1].value;\n\nfor i= 1, #Programs do\n\n  \tif Programs[i].name == currentProgramName then\n    \tfibaro:debug(Programs[i].name..'='..currentProgramName)\n        fibaro:debug(i)\n    \tif i == #Programs then \n      \t\tcurrentProgramName = Programs[1].name;\n      \t\tprogramCommand = Programs[1].value;\n      \telse\n      \t\tcurrentProgramName = Programs[i+1].name;\n        \tprogramCommand = Programs[i+1].value;\n      \tend\n      \t  fibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"SetProgram \"..tostring(programCommand));\n   \t  fibaro:debug(\"Matched switching to \"..currentProgramName..\" = \" ..programCommand);\n\n    break\n  \tend\nend ","buttonIcon":0,"favourite":false,"main":false},{"id":21,"lua":true,"waitForResponse":false,"caption":"[-]","name":"Button62","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"Program_SpDown\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"favourite":false,"main":false},{"id":22,"lua":true,"waitForResponse":false,"caption":"[+]","name":"Button63","empty":false,"msg":"local thisDevice= fibaro:getSelfId();\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",\"Program_SpUp\");\nfibaro:call(thisDevice, \"pressButton\", \"23\")","buttonIcon":0,"favourite":false,"main":false},{"id":23,"lua":true,"waitForResponse":false,"caption":"Set","name":"Button64","empty":false,"msg":"-- idea based on VD from https://forum.fibaro.com/index.php?/topic/19094-virtual-device-limitless-led-milight-controller/&tab=comments#comment-69962\n\nlocal IP = '192.168.1.22'\nlocal Port = 5987\nlocal Init = string.char (0x20,0x00,0x00,0x00,0x16,0x02,0x62,0x3A,0xD5,0xED,0xA3,0x01,0xAE,0x08,0x2D,0x46,0x61,0x41,0xA7,0xF6,0xDC,0xAF,0xFE,0xF7,0x00,0x00,0x1E)\nlocal Preample = string.char (0x80,0x00,0x00,0x00,0x11)\nlocal Filler = string.char (0x00)\nlocal On =  string.char (0x31,0x00,0x00,0x08,0x04,0x01,0x00,0x00,0x00)\nlocal Off =  string.char(0x31,0x00,0x00,0x08,0x04,0x02,0x00,0x00,0x00)\nlocal Won =  string.char(0x31,0x00,0x00,0x08,0x05,0x64,0x00,0x00,0x00)\nlocal Boff = string.char(0x31,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00)\nlocal thisDevice= fibaro:getSelfId();\n\n\ncommands ={\n{name='On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00)},\n{name='BridgeOn', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00)},\n{name='RGBWW_On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00)},\n{name='RGBW_On', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00)},\n\n{name='Off', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00)},\n{name='BridgeOff', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00)},\n{name='RGBWW_Off', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00)},\n{name='RGBW_Off', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00)},\n\n{name='SetColor', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x01, 0xFF, 0xFF, 0xFF, 0xFF)},\n{name='Bridge_SetColor', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF)},\n{name='RGBWW_SetColor', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x01, 0xFF, 0xFF, 0xFF, 0xFF)},\n{name='RGBW_SetColor', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x01, 0xFF, 0xFF, 0xFF, 0xFF)},\n\n{name='SetKelvin', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x05, 0xFF, 0x00, 0x00, 0x00)}, \n{name='Bridge_SetKelvinLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x05, 0xFF, 0x00, 0x00, 0x00)}, \n{name='RGBWW_SetKelvinLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x05, 0xFF, 0x00, 0x00, 0x00)}, \n{name='RGBW_SetKelvinLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)}, \n\n{name='SetBri', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x03, 0xFF, 0x00, 0x00, 0x00)},\n{name='Bridge_SetBri', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n{name='RGBWW_SetBriLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x03, 0xFF, 0x00, 0x00, 0x00)},\n{name='RGBW_SetBriLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n\n{name='SetSat', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n{name='Bridge_SetSat', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n{name='RGBWW_SetSatLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n{name='RGBW_SetSatLevel', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x02, 0xFF, 0x00, 0x00, 0x00)},\n\n{name='White_On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00)},\n{name='Bridge_White_On', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00)},\n{name='RGBWW_White_On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00)},\n{name='RGBW_White_On', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00)},\n\n{name='Night_On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00)},\n{name='RGBWW_Night_On', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00)},\n{name='RGBW_Night_On', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00)},\n\n{name='SetProgram', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x06, 0xFF, 0x00, 0x00, 0x00)},\n{name='Bridge_SetProgram', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x04, 0xFF, 0x00, 0x00, 0x00)}, \n{name='RGBWW_Disco_Mode', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x06, 0xFF, 0x00, 0x00, 0x00)},  \n{name='RGBW_Disco_Mode', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x04, 0xFF, 0x00, 0x00, 0x00)},\n\n{name='Program_SpUp', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00)},\n{name='Bridge_SpUp', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00)},\n{name='RGBWW_Mode_Speed_Up', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00)},\n{name='RGBW_Mode_Speed_Up', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00)},\n\n{name='Program_SpDown', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00)},\n{name='Bridge_SpDown', cmd =  string.char(0x31, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00)},\n{name='RGBWW_Mode_Speed_Down', cmd =  string.char(0x31, 0x00, 0x00, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00)},\n{name='RGBW_Mode_Speed_Down', cmd =  string.char(0x31, 0x00, 0x00, 0x07, 0x03, 0x04, 0x00, 0x00, 0x00)}\n }\n\nfunction replace_char3(pos, str, r)\n    return table.concat{str:sub(1,pos-1), r, str:sub(pos+1)}\nend\n\nfunction replace_char(pos, str, r)\n    return str:sub(1, pos-1) .. r .. str:sub(pos+1)\nend\n\n \nfunction round(num, idp)\n  local mult = 10^(idp or 0)\n  return math.floor(num * mult + 0.5) / mult\n  \nend\n\nzone = fibaro:getValue(thisDevice, \"ui.lGroup.value\")\ncolor = round(tonumber((fibaro:getValue(thisDevice, \"ui.sColor.value\")) * 255)/100,0)\nbright = tonumber(fibaro:getValue(thisDevice, \"ui.sBrightness.value\"))\nsaturation = tonumber(fibaro:getValue(thisDevice, \"ui.sSaturation.value\"))\nkelvin = tonumber(fibaro:getValue(thisDevice, \"ui.sKelvin.value\"))\ncall_command = fibaro:getValue(thisDevice, \"ui.lCommand.value\")\n\nif zone == '1' or zone == 'Bridge'  then ZoneID = string.char(0x01) end\nif zone == '2' then ZoneID = string.char(0x02) end\nif zone == '3' then ZoneID = string.char(0x03) end\nif zone == '4' then ZoneID = string.char(0x04) end\nif zone == 'All' then ZoneID = string.char(0x00) end\n\nif call_command:sub(1,8) == \"SetColor\" then \n  call_command = call_command:sub(1,8)\n  end\n\nif call_command:sub(1,10) == \"SetProgram\" then \n  call_parameter = call_command:sub(12,15)\n  call_command = call_command:sub(1,10)\n  end\n  \nofset = 0 -- 0- RGBWW modules, 1- Bridge, 2-RGBWW, 4-RGBW modules\nif zone == 'Bridge' then ofset=1 end\n\nfor i= 1, #commands do\n  if commands[i].name == call_command then\n  Command = commands[i+ofset].cmd\n  fibaro:debug(commands[i+ofset].name)\n  fibaro:debug(commands[i+ofset].cmd)\n  fibaro:debug(i+ofset)\n\n    end\nend  \n\nif call_command:find(\"Color\") then \nCommand=Command:gsub(string.char(0xFF), string.char(color)) \nfibaro:debug(color)\nend\nif call_command:find(\"Bri\") then Command=Command:gsub(string.char(0xFF), string.char(bright))  end\nif call_command:find(\"Sat\") then Command=Command:gsub(string.char(0xFF), string.char(saturation))  end\nif call_command:find(\"Kelvin\") then Command=Command:gsub(string.char(0xFF), string.char(kelvin))  end\nfibaro:debug('program...')\nfibaro:debug(call_command:sub(12,15))\nif call_command:find(\"Program\") then Command=Command:gsub(string.char(0xFF), string.char(call_parameter))  end\n\n\nfunction fromhex(str)\n    return (str:gsub('..', function (cc)\n        return string.char(tonumber(cc, 16))\n    end))\nend\n\n\n-- code part by https://github.com/basvinken from discusion on https://github.com/home-assistant/home-assistant/issues/4676\n\n--Generate random Sequential Byte just helps with keeping commands in the correct order, and it helps to ignore duplicate packets already received.\nmath.randomseed(os.time())\nmath.random(); math.random(); math.random()\nlocal RandomNumber = math.random(255)\nlocal SequentialByte = string.char(RandomNumber)\n--Action\n\n--Send Init and wait for response\nlocal Response={}\nsocket = Net.FUdpSocket()\nsocket:setBroadcast(true)\nbytes, ErrorCode = socket:write (Init, IP, Port)\nif ErrorCode == 0 then\nlocal ResponseLength = 1\nwhile (ErrorCode==0 and ResponseLength>0 and ResponseLength~=22) do\nResponse, ErrorCode = socket:read()\nResponseLength = string.len(Response)\nend\nend\n--Extract data from UDP response\nlocal MAC = Response:sub(0x09,0x0E)\nlocal WifiBridgeSessionID1 = Response:sub(0x14,0x14)\nlocal WifiBridgeSessionID2 = Response:sub(0x15,0x15)\nlocal Payload = Preample..WifiBridgeSessionID1..WifiBridgeSessionID2..Filler..SequentialByte..Filler..Command..ZoneID..Filler\nlocal ChksumString = Payload:sub(0x0B)\n\n--Calculate Checksum\nlocal i = 1\nlocal Chksum = 0\nwhile i <= ChksumString:len() do\nNumber = ChksumString:sub(i,i)\nfunction tohex(str)\n    return (str:gsub('.', function (c)\n        return string.format('%02X', string.byte(c))\n    end))\nend  \ntest = tohex(Number)  \nChksum = Chksum + tonumber(test,16)\n  --Chksum = Chksum + tonumber(Number:tohex(),16)\ni = i + 1\nend\n--Calculate remainder Chksum%256 same as &0xFF\nChksum = (Chksum - math.floor(Chksum/256)*256)\nlocal Chksumchar = string.char(Chksum)\nPayload = Payload..Chksumchar\n--fibaro:debug(Payload)\nResponse={}\nbytes, ErrorCode = socket:write (Payload, IP, Port)\nif ErrorCode == 0 then\nlocal ResponseLength = 1\nwhile (ErrorCode==0 and ResponseLength>0 and ResponseLength~=8) do\nResponse, ErrorCode = socket:read()\nResponseLength = string.len(Response)\nend\nend\nsocket = nil\n--Extract data from UDP response\nlocal Result = \"\"\nlocal ResultByte = Response:sub(0x08,0x08)\nlocal ResponseSequentialByte = Response:sub(0x07,0x07)\nif (ResponseSequentialByte==SequentialByte and ResultByte==Filler) then\nResult = \"Successfull\"\nelse\nResult = \"Failed\"\nend\nfibaro:debug(Result)\nfibaro:call(thisDevice,\"setProperty\",\"ui.lCommand.value\",Result);\n","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}